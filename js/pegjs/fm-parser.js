define([ "./connector-parser", "./ast-nodes" ], function () {
fmparser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "parserState": parse_parserState,
        "treeNode": parse_treeNode,
        "EOF": parse_EOF,
        "directive": parse_directive,
        "fmComment": parse_fmComment,
        "fmExpression": parse_fmExpression,
        "looseDirectiveEnd": parse_looseDirectiveEnd,
        "assignDirective": parse_assignDirective,
        "compressDirective": parse_compressDirective,
        "compressOpenTag": parse_compressOpenTag,
        "compressCloseTag": parse_compressCloseTag,
        "ifDirective": parse_ifDirective,
        "ifDirectiveTag": parse_ifDirectiveTag,
        "ifDirectiveElseIfTag": parse_ifDirectiveElseIfTag,
        "ifDirectiveElseTag": parse_ifDirectiveElseTag,
        "ifCloseTag": parse_ifCloseTag,
        "listDirective": parse_listDirective,
        "listOpenTag": parse_listOpenTag,
        "listCloseTag": parse_listCloseTag,
        "expression": parse_expression,
        "orExpression": parse_orExpression,
        "andExpression": parse_andExpression,
        "equalityExpression": parse_equalityExpression,
        "relationalExpression": parse_relationalExpression,
        "rangeExpression": parse_rangeExpression,
        "additiveExpression": parse_additiveExpression,
        "multiplicativeExpression": parse_multiplicativeExpression,
        "unaryExpression": parse_unaryExpression,
        "unaryPlusMinusExpression": parse_unaryPlusMinusExpression,
        "notExpression": parse_notExpression,
        "primaryExpression": parse_primaryExpression,
        "addSubExpression": parse_addSubExpression,
        "dynamicKey": parse_dynamicKey,
        "methodArgs": parse_methodArgs,
        "builtIn": parse_builtIn,
        "defaultTo": parse_defaultTo,
        "identifierDefinition": parse_identifierDefinition,
        "listIdentifierDefinition": parse_listIdentifierDefinition,
        "identifier": parse_identifier,
        "listLiteral": parse_listLiteral,
        "positionalArgs": parse_positionalArgs,
        "parenthesis": parse_parenthesis,
        "hashLiteral": parse_hashLiteral,
        "hashLiteralElement": parse_hashLiteralElement,
        "terminatingExclam": parse_terminatingExclam,
        "builtInOption": parse_builtInOption,
        "stringLiteral": parse_stringLiteral,
        "booleanLiteral": parse_booleanLiteral,
        "stringContent": parse_stringContent,
        "stringErrorToken": parse_stringErrorToken,
        "fmExpressionErrorToken": parse_fmExpressionErrorToken,
        "inTagErrorTokens": parse_inTagErrorTokens,
        "tillTagClose": parse_tillTagClose,
        "anyToken": parse_anyToken,
        "_": parse__,
        "__": parse___,
        "$__": parse_$__,
        "WS": parse_WS,
        "NUMBER_LITERAL": parse_NUMBER_LITERAL,
        "FM_COMMENT_CONTENT": parse_FM_COMMENT_CONTENT,
        "NEWLINE": parse_NEWLINE,
        "PCDATA": parse_PCDATA,
        "IDENTIFIER": parse_IDENTIFIER,
        "ESCAPED_CHAR": parse_ESCAPED_CHAR,
        "STRING_START": parse_STRING_START,
        "STRING_SEQ_MATCH": parse_STRING_SEQ_MATCH,
        "STRING_END": parse_STRING_END,
        "TAG_OPEN": parse_TAG_OPEN,
        "ASSIGN_TAG": parse_ASSIGN_TAG,
        "COMPRESS_TAG": parse_COMPRESS_TAG,
        "LIST_TAG": parse_LIST_TAG,
        "IF_TAG": parse_IF_TAG,
        "ELSE_IF_TAG": parse_ELSE_IF_TAG,
        "ELSE_TAG": parse_ELSE_TAG,
        "LIST_CLOSE_TAG": parse_LIST_CLOSE_TAG,
        "IF_CLOSE_TAG": parse_IF_CLOSE_TAG,
        "COMPRESS_CLOSE_TAG": parse_COMPRESS_CLOSE_TAG,
        "END_TAG": parse_END_TAG,
        "TAG_CLOSE_CLOSE": parse_TAG_CLOSE_CLOSE,
        "TAG_CLOSE": parse_TAG_CLOSE,
        "TAG_CLOSE_SELF": parse_TAG_CLOSE_SELF,
        "COMMENT_OPEN": parse_COMMENT_OPEN,
        "COMMENT_CLOSE": parse_COMMENT_CLOSE,
        "EXPRESSION_OPEN": parse_EXPRESSION_OPEN,
        "EXPRESSION_CLOSE": parse_EXPRESSION_CLOSE,
        "ANY_CHAR": parse_ANY_CHAR,
        "EQUALS": parse_EQUALS,
        "LESS_THAN": parse_LESS_THAN,
        "LESS_THAN_EQUALS": parse_LESS_THAN_EQUALS,
        "ESCAPED_GT": parse_ESCAPED_GT,
        "ESCAPED_GTE": parse_ESCAPED_GTE,
        "OPEN_PAREN": parse_OPEN_PAREN,
        "CLOSE_PAREN": parse_CLOSE_PAREN,
        "OPEN_BRACKET": parse_OPEN_BRACKET,
        "CLOSE_BRACKET": parse_CLOSE_BRACKET,
        "OPEN_BRACE": parse_OPEN_BRACE,
        "CLOSE_BRACE": parse_CLOSE_BRACE,
        "COMMA": parse_COMMA,
        "SEMICOLON": parse_SEMICOLON,
        "COLON": parse_COLON,
        "DOT": parse_DOT,
        "DOT_DOT": parse_DOT_DOT,
        "DOUBLE_STAR": parse_DOUBLE_STAR,
        "EXCLAM": parse_EXCLAM,
        "PLUS": parse_PLUS,
        "MINUS": parse_MINUS,
        "TIMES": parse_TIMES,
        "DIVIDE": parse_DIVIDE,
        "PERCENT": parse_PERCENT,
        "BUILT_IN": parse_BUILT_IN,
        "EXISTS": parse_EXISTS,
        "NATURAL_GT": parse_NATURAL_GT,
        "NATURAL_GTE": parse_NATURAL_GTE,
        "DOUBLE_EQUALS": parse_DOUBLE_EQUALS,
        "NOT_EQUALS": parse_NOT_EQUALS,
        "AND": parse_AND,
        "OR": parse_OR,
        "IN": parse_IN,
        "AS": parse_AS,
        "USING": parse_USING,
        "FALSE": parse_FALSE,
        "TRUE": parse_TRUE,
        "DATE_UTILS_IDENT": parse_DATE_UTILS_IDENT,
        "MARKET_DATA_IDENT": parse_MARKET_DATA_IDENT,
        "REPORT_DATA_IDENT": parse_REPORT_DATA_IDENT,
        "BUNDLE_IDENT": parse_BUNDLE_IDENT,
        "index": parse_index
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "parserState";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_parserState() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_treeNode();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_treeNode();
        }
        if (result0 !== null) {
          result1 = parse_EOF();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tree) {
        			var node = new SyntaxNode("parserState");
        			(tree !== undefined)? node.addChild(tree) : null;
                    connector.setAST(node);
        			return node;
        		})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_treeNode() {
        var result0;
        
        result0 = parse_PCDATA();
        if (result0 === null) {
          result0 = parse_fmComment();
          if (result0 === null) {
            result0 = parse_fmExpression();
            if (result0 === null) {
              result0 = parse_NEWLINE();
              if (result0 === null) {
                result0 = parse_directive();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_EOF() {
        var result0;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        if (input.length > pos.offset) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        	})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_directive() {
        var result0, result1, result2;
        var pos0, pos1;
        
        result0 = parse_assignDirective();
        if (result0 === null) {
          result0 = parse_compressDirective();
          if (result0 === null) {
            result0 = parse_ifDirective();
            if (result0 === null) {
              result0 = parse_listDirective();
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
                if (result0 !== null) {
                  result1 = parse_TAG_OPEN();
                  if (result1 === null) {
                    result1 = parse_END_TAG();
                  }
                  if (result1 !== null) {
                    result2 = parse_tillTagClose();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, a, b) {
                			var node = new ErrorNode("InvalidDirective");
                			node.setErrorMessage("Invalid directive");
                			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directives.html");
                			node.addChild(a);
                			node.addChild(b);
                			return node;
                		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
                  if (result0 !== null) {
                    result1 = parse_ASSIGN_TAG();
                    if (result1 === null) {
                      result1 = parse_COMPRESS_TAG();
                      if (result1 === null) {
                        result1 = parse_LIST_TAG();
                        if (result1 === null) {
                          result1 = parse_IF_TAG();
                        }
                      }
                    }
                    if (result1 !== null) {
                      result2 = parse_tillTagClose();
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, a, b) {
                  			var node = new ErrorNode("InvalidDirective");
                  			node.setErrorMessage("Could not find matching close tag for directive");
                  			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directives.html");
                  			node.addChild(a);
                  			node.addChild(b);
                  			return node;
                  		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
                    if (result0 !== null) {
                      result1 = parse_ELSE_IF_TAG();
                      if (result1 === null) {
                        result1 = parse_ELSE_TAG();
                      }
                      if (result1 !== null) {
                        result2 = parse_tillTagClose();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, a, b) {
                    			var node = new ErrorNode("InvalidDirective");
                    			node.setErrorMessage("Directive is not in context");
                    			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directives.html");
                    			node.addChild(a);
                    			node.addChild(b);
                    			return node;
                    		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
                      if (result0 !== null) {
                        result1 = parse_IF_CLOSE_TAG();
                        if (result1 === null) {
                          result1 = parse_COMPRESS_CLOSE_TAG();
                          if (result1 === null) {
                            result1 = parse_LIST_CLOSE_TAG();
                          }
                        }
                        if (result1 !== null) {
                          result2 = parse_tillTagClose();
                          if (result2 !== null) {
                            result0 = [result0, result1, result2];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, a, b) {
                      			var node = new ErrorNode("InvalidDirective");
                      			node.setErrorMessage("Could not find matching open tag for directive");
                      			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directives.html");
                      			node.addChild(a);
                      			node.addChild(b);
                      			return node;
                      		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_fmComment() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_COMMENT_OPEN();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_NEWLINE();
          if (result2 === null) {
            result2 = parse_FM_COMMENT_CONTENT();
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_NEWLINE();
            if (result2 === null) {
              result2 = parse_FM_COMMENT_CONTENT();
            }
          }
          if (result1 !== null) {
            result2 = parse_COMMENT_CLOSE();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("fmComment");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_COMMENT_OPEN();
            if (result1 !== null) {
              result2 = [];
              result3 = parse_NEWLINE();
              if (result3 === null) {
                result3 = parse_FM_COMMENT_CONTENT();
              }
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_NEWLINE();
                if (result3 === null) {
                  result3 = parse_FM_COMMENT_CONTENT();
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b) {
          			var node = new ErrorNode("InvalidFreeMarkerComment");
          			node.setErrorMessage("Invalid FreeMarker comment");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/dgui_template_overallstructure.html");
          			node.addChild(a);
          			node.addChild(b);
          			return node;
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_fmExpression() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_EXPRESSION_OPEN();
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            result2 = parse_EXPRESSION_CLOSE();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("fmExpression");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_EXPRESSION_OPEN();
            if (result1 !== null) {
              result2 = [];
              result3 = parse_fmExpressionErrorToken();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_fmExpressionErrorToken();
              }
              if (result2 !== null) {
                result3 = parse_EXPRESSION_CLOSE();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b, c) {
          			var node = new ErrorNode("InvalidFreeMarkerExpression");
          			node.setErrorMessage("Invalid FreeMarker expression");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/dgui_template_exp.html#dgui_template_exp_direct");
          			node.addChild(a);
          			node.addChild(b);
          			node.addChild(c);
          			return node;
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_looseDirectiveEnd() {
        var result0;
        
        result0 = parse_TAG_CLOSE_SELF();
        if (result0 === null) {
          result0 = parse_TAG_CLOSE();
        }
        return result0;
      }
      
      function parse_assignDirective() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ASSIGN_TAG();
        if (result0 !== null) {
          result1 = parse_$__();
          if (result1 !== null) {
            result2 = parse_identifierDefinition();
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_EQUALS();
                if (result4 !== null) {
                  result5 = parse___();
                  if (result5 !== null) {
                    result6 = parse_expression();
                    if (result6 !== null) {
                      result7 = parse___();
                      if (result7 !== null) {
                        result8 = parse_looseDirectiveEnd();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c, d, e, f, g, h, i) {
        			var node = new SyntaxNode("assignDirective");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			node.addChild(d);
        			node.addChild(e);
        			node.addChild(f);
        			node.addChild(g);
        			node.addChild(h);
        			node.addChild(i);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4], result0[5], result0[6], result0[7], result0[8]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_ASSIGN_TAG();
            if (result1 !== null) {
              result2 = parse_tillTagClose();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, c) {
          			var node = new ErrorNode("assignDirective");
          			node.setErrorMessage("Invalid \"assign\" directive");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_assign.html");
          			node.addChild(a);
          			// node.addChild(b);
          			node.addChild(c);
          			return node.fold();
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_compressDirective() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_compressOpenTag();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          reportFailures++;
          result2 = parse_compressCloseTag();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result3 = parse_treeNode();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            reportFailures++;
            result2 = parse_compressCloseTag();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result3 = parse_treeNode();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result2 = parse_compressCloseTag();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("compressDirective");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_compressOpenTag();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a) {
          			var node = new ErrorNode("compressDirective");
          			node.setErrorMessage("Invalid \"compress\" directive");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_compress.html");
          			node.addChild(a);
          			return node;
          		})(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_compressOpenTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_COMPRESS_TAG();
        if (result0 !== null) {
          result1 = parse_TAG_CLOSE();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new CompressDirectiveOpenTagNode("compressOpenTag");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_COMPRESS_TAG();
            if (result1 !== null) {
              result2 = parse_tillTagClose();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b) {
          			var node = new ErrorNode("compressOpenTag");
          			node.setErrorMessage("Invalid \"compress\" tag");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_compress.html");
          			node.addChild(a);
          			node.addChild(b);
          			return node.fold();
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_compressCloseTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_COMPRESS_CLOSE_TAG();
        if (result0 !== null) {
          result1 = parse_TAG_CLOSE_CLOSE();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new CompressCloseTagNode("compressCloseTag");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_COMPRESS_CLOSE_TAG();
            if (result1 !== null) {
              result2 = parse_tillTagClose();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b) {
          			var node = new ErrorNode("compressCloseTag");
          			node.setErrorMessage("Invalid \"compress\" close tag");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_compress.html");
          			node.addChild(a);
          			node.addChild(b);
          			return node.fold();
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_ifDirective() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ifDirectiveTag();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          reportFailures++;
          result2 = parse_ifDirectiveElseIfTag();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            pos3 = clone(pos);
            reportFailures++;
            result3 = parse_ifDirectiveElseTag();
            reportFailures--;
            if (result3 === null) {
              result3 = "";
            } else {
              result3 = null;
              pos = clone(pos3);
            }
            if (result3 !== null) {
              pos3 = clone(pos);
              reportFailures++;
              result4 = parse_ifCloseTag();
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = clone(pos3);
              }
              if (result4 !== null) {
                result5 = parse_treeNode();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            reportFailures++;
            result2 = parse_ifDirectiveElseIfTag();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              pos3 = clone(pos);
              reportFailures++;
              result3 = parse_ifDirectiveElseTag();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                pos3 = clone(pos);
                reportFailures++;
                result4 = parse_ifCloseTag();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos3);
                }
                if (result4 !== null) {
                  result5 = parse_treeNode();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_ifDirectiveElseIfTag();
            if (result3 !== null) {
              result4 = [];
              pos3 = clone(pos);
              pos4 = clone(pos);
              reportFailures++;
              result5 = parse_ifDirectiveElseIfTag();
              reportFailures--;
              if (result5 === null) {
                result5 = "";
              } else {
                result5 = null;
                pos = clone(pos4);
              }
              if (result5 !== null) {
                pos4 = clone(pos);
                reportFailures++;
                result6 = parse_ifDirectiveElseTag();
                reportFailures--;
                if (result6 === null) {
                  result6 = "";
                } else {
                  result6 = null;
                  pos = clone(pos4);
                }
                if (result6 !== null) {
                  pos4 = clone(pos);
                  reportFailures++;
                  result7 = parse_ifCloseTag();
                  reportFailures--;
                  if (result7 === null) {
                    result7 = "";
                  } else {
                    result7 = null;
                    pos = clone(pos4);
                  }
                  if (result7 !== null) {
                    result8 = parse_treeNode();
                    if (result8 !== null) {
                      result5 = [result5, result6, result7, result8];
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result5 = null;
                  pos = clone(pos3);
                }
              } else {
                result5 = null;
                pos = clone(pos3);
              }
              while (result5 !== null) {
                result4.push(result5);
                pos3 = clone(pos);
                pos4 = clone(pos);
                reportFailures++;
                result5 = parse_ifDirectiveElseIfTag();
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = clone(pos4);
                }
                if (result5 !== null) {
                  pos4 = clone(pos);
                  reportFailures++;
                  result6 = parse_ifDirectiveElseTag();
                  reportFailures--;
                  if (result6 === null) {
                    result6 = "";
                  } else {
                    result6 = null;
                    pos = clone(pos4);
                  }
                  if (result6 !== null) {
                    pos4 = clone(pos);
                    reportFailures++;
                    result7 = parse_ifCloseTag();
                    reportFailures--;
                    if (result7 === null) {
                      result7 = "";
                    } else {
                      result7 = null;
                      pos = clone(pos4);
                    }
                    if (result7 !== null) {
                      result8 = parse_treeNode();
                      if (result8 !== null) {
                        result5 = [result5, result6, result7, result8];
                      } else {
                        result5 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result5 = null;
                  pos = clone(pos3);
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_ifDirectiveElseIfTag();
              if (result3 !== null) {
                result4 = [];
                pos3 = clone(pos);
                pos4 = clone(pos);
                reportFailures++;
                result5 = parse_ifDirectiveElseIfTag();
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = clone(pos4);
                }
                if (result5 !== null) {
                  pos4 = clone(pos);
                  reportFailures++;
                  result6 = parse_ifDirectiveElseTag();
                  reportFailures--;
                  if (result6 === null) {
                    result6 = "";
                  } else {
                    result6 = null;
                    pos = clone(pos4);
                  }
                  if (result6 !== null) {
                    pos4 = clone(pos);
                    reportFailures++;
                    result7 = parse_ifCloseTag();
                    reportFailures--;
                    if (result7 === null) {
                      result7 = "";
                    } else {
                      result7 = null;
                      pos = clone(pos4);
                    }
                    if (result7 !== null) {
                      result8 = parse_treeNode();
                      if (result8 !== null) {
                        result5 = [result5, result6, result7, result8];
                      } else {
                        result5 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result5 = null;
                  pos = clone(pos3);
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos3 = clone(pos);
                  pos4 = clone(pos);
                  reportFailures++;
                  result5 = parse_ifDirectiveElseIfTag();
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = clone(pos4);
                  }
                  if (result5 !== null) {
                    pos4 = clone(pos);
                    reportFailures++;
                    result6 = parse_ifDirectiveElseTag();
                    reportFailures--;
                    if (result6 === null) {
                      result6 = "";
                    } else {
                      result6 = null;
                      pos = clone(pos4);
                    }
                    if (result6 !== null) {
                      pos4 = clone(pos);
                      reportFailures++;
                      result7 = parse_ifCloseTag();
                      reportFailures--;
                      if (result7 === null) {
                        result7 = "";
                      } else {
                        result7 = null;
                        pos = clone(pos4);
                      }
                      if (result7 !== null) {
                        result8 = parse_treeNode();
                        if (result8 !== null) {
                          result5 = [result5, result6, result7, result8];
                        } else {
                          result5 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              pos2 = clone(pos);
              result3 = parse_ifDirectiveElseTag();
              if (result3 !== null) {
                result4 = [];
                pos3 = clone(pos);
                pos4 = clone(pos);
                reportFailures++;
                result5 = parse_ifCloseTag();
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = clone(pos4);
                }
                if (result5 !== null) {
                  result6 = parse_treeNode();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result5 = null;
                  pos = clone(pos3);
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos3 = clone(pos);
                  pos4 = clone(pos);
                  reportFailures++;
                  result5 = parse_ifCloseTag();
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = clone(pos4);
                  }
                  if (result5 !== null) {
                    result6 = parse_treeNode();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_ifCloseTag();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c, d, e) {
        			var node = new SyntaxNode("ifDirective");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			node.addChild(d);
        			node.addChild(e);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_ifDirectiveTag();
            if (result1 !== null) {
              result2 = [];
              pos2 = clone(pos);
              pos3 = clone(pos);
              reportFailures++;
              result3 = parse_ifDirectiveElseIfTag();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                pos3 = clone(pos);
                reportFailures++;
                result4 = parse_ifDirectiveElseTag();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos3);
                }
                if (result4 !== null) {
                  pos3 = clone(pos);
                  reportFailures++;
                  result5 = parse_ifCloseTag();
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                  if (result5 !== null) {
                    result6 = parse_treeNode();
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              while (result3 !== null) {
                result2.push(result3);
                pos2 = clone(pos);
                pos3 = clone(pos);
                reportFailures++;
                result3 = parse_ifDirectiveElseIfTag();
                reportFailures--;
                if (result3 === null) {
                  result3 = "";
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
                if (result3 !== null) {
                  pos3 = clone(pos);
                  reportFailures++;
                  result4 = parse_ifDirectiveElseTag();
                  reportFailures--;
                  if (result4 === null) {
                    result4 = "";
                  } else {
                    result4 = null;
                    pos = clone(pos3);
                  }
                  if (result4 !== null) {
                    pos3 = clone(pos);
                    reportFailures++;
                    result5 = parse_ifCloseTag();
                    reportFailures--;
                    if (result5 === null) {
                      result5 = "";
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                    if (result5 !== null) {
                      result6 = parse_treeNode();
                      if (result6 !== null) {
                        result3 = [result3, result4, result5, result6];
                      } else {
                        result3 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result3 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              }
              if (result2 !== null) {
                result3 = [];
                pos2 = clone(pos);
                result4 = parse_ifDirectiveElseIfTag();
                if (result4 !== null) {
                  result5 = [];
                  pos3 = clone(pos);
                  pos4 = clone(pos);
                  reportFailures++;
                  result6 = parse_ifDirectiveElseIfTag();
                  reportFailures--;
                  if (result6 === null) {
                    result6 = "";
                  } else {
                    result6 = null;
                    pos = clone(pos4);
                  }
                  if (result6 !== null) {
                    pos4 = clone(pos);
                    reportFailures++;
                    result7 = parse_ifDirectiveElseTag();
                    reportFailures--;
                    if (result7 === null) {
                      result7 = "";
                    } else {
                      result7 = null;
                      pos = clone(pos4);
                    }
                    if (result7 !== null) {
                      pos4 = clone(pos);
                      reportFailures++;
                      result8 = parse_ifCloseTag();
                      reportFailures--;
                      if (result8 === null) {
                        result8 = "";
                      } else {
                        result8 = null;
                        pos = clone(pos4);
                      }
                      if (result8 !== null) {
                        result9 = parse_treeNode();
                        if (result9 !== null) {
                          result6 = [result6, result7, result8, result9];
                        } else {
                          result6 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result6 = null;
                    pos = clone(pos3);
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    pos3 = clone(pos);
                    pos4 = clone(pos);
                    reportFailures++;
                    result6 = parse_ifDirectiveElseIfTag();
                    reportFailures--;
                    if (result6 === null) {
                      result6 = "";
                    } else {
                      result6 = null;
                      pos = clone(pos4);
                    }
                    if (result6 !== null) {
                      pos4 = clone(pos);
                      reportFailures++;
                      result7 = parse_ifDirectiveElseTag();
                      reportFailures--;
                      if (result7 === null) {
                        result7 = "";
                      } else {
                        result7 = null;
                        pos = clone(pos4);
                      }
                      if (result7 !== null) {
                        pos4 = clone(pos);
                        reportFailures++;
                        result8 = parse_ifCloseTag();
                        reportFailures--;
                        if (result8 === null) {
                          result8 = "";
                        } else {
                          result8 = null;
                          pos = clone(pos4);
                        }
                        if (result8 !== null) {
                          result9 = parse_treeNode();
                          if (result9 !== null) {
                            result6 = [result6, result7, result8, result9];
                          } else {
                            result6 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result6 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos3);
                    }
                  }
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
                while (result4 !== null) {
                  result3.push(result4);
                  pos2 = clone(pos);
                  result4 = parse_ifDirectiveElseIfTag();
                  if (result4 !== null) {
                    result5 = [];
                    pos3 = clone(pos);
                    pos4 = clone(pos);
                    reportFailures++;
                    result6 = parse_ifDirectiveElseIfTag();
                    reportFailures--;
                    if (result6 === null) {
                      result6 = "";
                    } else {
                      result6 = null;
                      pos = clone(pos4);
                    }
                    if (result6 !== null) {
                      pos4 = clone(pos);
                      reportFailures++;
                      result7 = parse_ifDirectiveElseTag();
                      reportFailures--;
                      if (result7 === null) {
                        result7 = "";
                      } else {
                        result7 = null;
                        pos = clone(pos4);
                      }
                      if (result7 !== null) {
                        pos4 = clone(pos);
                        reportFailures++;
                        result8 = parse_ifCloseTag();
                        reportFailures--;
                        if (result8 === null) {
                          result8 = "";
                        } else {
                          result8 = null;
                          pos = clone(pos4);
                        }
                        if (result8 !== null) {
                          result9 = parse_treeNode();
                          if (result9 !== null) {
                            result6 = [result6, result7, result8, result9];
                          } else {
                            result6 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result6 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos3);
                    }
                    while (result6 !== null) {
                      result5.push(result6);
                      pos3 = clone(pos);
                      pos4 = clone(pos);
                      reportFailures++;
                      result6 = parse_ifDirectiveElseIfTag();
                      reportFailures--;
                      if (result6 === null) {
                        result6 = "";
                      } else {
                        result6 = null;
                        pos = clone(pos4);
                      }
                      if (result6 !== null) {
                        pos4 = clone(pos);
                        reportFailures++;
                        result7 = parse_ifDirectiveElseTag();
                        reportFailures--;
                        if (result7 === null) {
                          result7 = "";
                        } else {
                          result7 = null;
                          pos = clone(pos4);
                        }
                        if (result7 !== null) {
                          pos4 = clone(pos);
                          reportFailures++;
                          result8 = parse_ifCloseTag();
                          reportFailures--;
                          if (result8 === null) {
                            result8 = "";
                          } else {
                            result8 = null;
                            pos = clone(pos4);
                          }
                          if (result8 !== null) {
                            result9 = parse_treeNode();
                            if (result9 !== null) {
                              result6 = [result6, result7, result8, result9];
                            } else {
                              result6 = null;
                              pos = clone(pos3);
                            }
                          } else {
                            result6 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result6 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos3);
                      }
                    }
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                }
                if (result3 !== null) {
                  pos2 = clone(pos);
                  result4 = parse_ifDirectiveElseTag();
                  if (result4 !== null) {
                    result5 = [];
                    pos3 = clone(pos);
                    pos4 = clone(pos);
                    reportFailures++;
                    result6 = parse_ifCloseTag();
                    reportFailures--;
                    if (result6 === null) {
                      result6 = "";
                    } else {
                      result6 = null;
                      pos = clone(pos4);
                    }
                    if (result6 !== null) {
                      result7 = parse_treeNode();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos3);
                    }
                    while (result6 !== null) {
                      result5.push(result6);
                      pos3 = clone(pos);
                      pos4 = clone(pos);
                      reportFailures++;
                      result6 = parse_ifCloseTag();
                      reportFailures--;
                      if (result6 === null) {
                        result6 = "";
                      } else {
                        result6 = null;
                        pos = clone(pos4);
                      }
                      if (result6 !== null) {
                        result7 = parse_treeNode();
                        if (result7 !== null) {
                          result6 = [result6, result7];
                        } else {
                          result6 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos3);
                      }
                    }
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                  result4 = result4 !== null ? result4 : "";
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b, c, d) {
          			var node = new ErrorNode("ifDirective");
          			node.setErrorMessage("Invalid \"if\" directive");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_if.html");
          			node.addChild(a);
          			node.addChild(b);
          			node.addChild(c);
          			node.addChild(d);
          			return node;
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_ifDirectiveTag() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_IF_TAG();
        if (result0 !== null) {
          result1 = parse_$__();
          if (result1 !== null) {
            result2 = parse_expression();
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_TAG_CLOSE();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c, d, e) {
        			var node = new IfDirectiveOpenTagNode("ifDirectiveTag");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			node.addChild(d);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_IF_TAG();
            if (result1 !== null) {
              result2 = parse_tillTagClose();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b) {
          			var node = new ErrorNode("ifDirectiveTag");
          			node.setErrorMessage("Invalid \"if\" tag");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_if.html");
          			node.addChild(a);
          			node.addChild(b);
          			return node.fold();
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_ifDirectiveElseIfTag() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ELSE_IF_TAG();
        if (result0 !== null) {
          result1 = parse_$__();
          if (result1 !== null) {
            result2 = parse_expression();
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_TAG_CLOSE();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c, d, e) {
        			var node = new SyntaxNode("ifDirectiveElseIfTag");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			node.addChild(d);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_ELSE_IF_TAG();
            if (result1 !== null) {
              result2 = parse_tillTagClose();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b) {
          			var node = new ErrorNode("ifDirectiveElseIfTag");
          			node.setErrorMessage("Invalid \"elseif\" tag");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_if.html");
          			node.addChild(a);
          			node.addChild(b);
          			return node.fold();
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_ifDirectiveElseTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ELSE_TAG();
        if (result0 !== null) {
          result1 = parse_TAG_CLOSE();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new IfDirectiveElseTagNode("ifDirectiveElseTag");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_ELSE_TAG();
            if (result1 !== null) {
              result2 = parse_tillTagClose();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b) {
          			var node = new ErrorNode("ifDirectiveElseTag");
          			node.setErrorMessage("Invalid \"else\" tag");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_if.html");
          			node.addChild(a);
          			node.addChild(b);
          			return node.fold();
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_ifCloseTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_IF_CLOSE_TAG();
        if (result0 !== null) {
          result1 = parse_TAG_CLOSE_CLOSE();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new IfCloseTagNode("ifCloseTag");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_IF_CLOSE_TAG();
            if (result1 !== null) {
              result2 = parse_tillTagClose();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b) {
          			var node = new ErrorNode("ifCloseTag");
          			node.setErrorMessage("Invalid \"if\" close tag");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_if.html");
          			node.addChild(a);
          			node.addChild(b);
          			return node.fold();
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_listDirective() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_listOpenTag();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          reportFailures++;
          result2 = parse_listCloseTag();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result3 = parse_treeNode();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            reportFailures++;
            result2 = parse_listCloseTag();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result3 = parse_treeNode();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result2 = parse_listCloseTag();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("listDirective");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_listOpenTag();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a) {
          			var node = new ErrorNode("listDirective");
          			node.setErrorMessage("Invalid \"list\" directive");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_list.html");
          			node.addChild(a);
          			return node;
          		})(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_listOpenTag() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_LIST_TAG();
        if (result0 !== null) {
          result1 = parse_$__();
          if (result1 !== null) {
            result2 = parse_expression();
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_AS();
                if (result4 !== null) {
                  result5 = parse___();
                  if (result5 !== null) {
                    result6 = parse_listIdentifierDefinition();
                    if (result6 !== null) {
                      result7 = parse___();
                      if (result7 !== null) {
                        result8 = parse_TAG_CLOSE();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c, d, e, f, g, h, i) {
        			var node = new ListDirectiveOpenTagNode("listOpenTag");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			node.addChild(d);
        			node.addChild(e);
        			node.addChild(f);
        			node.addChild(g);
        			node.addChild(h);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4], result0[5], result0[6], result0[7], result0[8]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_LIST_TAG();
            if (result1 !== null) {
              result2 = parse_tillTagClose();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b) {
          			var node = new ErrorNode("listOpenTag");
          			node.setErrorMessage("Invalid \"list\" tag");	
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_list.html");
          			node.addChild(a);
          			node.addChild(b);
          			return node.fold();
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_listCloseTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_LIST_CLOSE_TAG();
        if (result0 !== null) {
          result1 = parse_TAG_CLOSE_CLOSE();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new ListCloseTagNode("listCloseTag");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse_LIST_CLOSE_TAG();
            if (result1 !== null) {
              result2 = parse_tillTagClose();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a, b) {
          			var node = new ErrorNode("listCloseTag");
          			node.setErrorMessage("Invalid \"list\" close tag");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/ref_directive_list.html");
          			node.addChild(a);
          			node.addChild(b);
          			return node.fold();
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_expression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_orExpression();
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) {
        			var node = new SyntaxNode("expression");
        			node.addChild(a);
        			return node.fold();		
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result2 = parse_inTagErrorTokens();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_inTagErrorTokens();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, a) {
          			var node = new ErrorNode("ErrorExpression");
          			node.setErrorMessage("Invalid expression");		
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/dgui_template_exp.html");
          			node.addChild(a);
          			return node.fold();		
          		})(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_orExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_andExpression();
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_OR();
            if (result3 !== null) {
              result4 = parse___();
              if (result4 !== null) {
                result5 = parse_andExpression();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_OR();
              if (result3 !== null) {
                result4 = parse___();
                if (result4 !== null) {
                  result5 = parse_andExpression();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("orExpression");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_andExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_equalityExpression();
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_AND();
            if (result3 !== null) {
              result4 = parse___();
              if (result4 !== null) {
                result5 = parse_equalityExpression();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_AND();
              if (result3 !== null) {
                result4 = parse___();
                if (result4 !== null) {
                  result5 = parse_equalityExpression();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("andExpression");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_equalityExpression() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_relationalExpression();
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_NOT_EQUALS();
            if (result2 === null) {
              result2 = parse_DOUBLE_EQUALS();
              if (result2 === null) {
                result2 = parse_EQUALS();
              }
            }
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_relationalExpression();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("equalityExpression");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_relationalExpression() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_rangeExpression();
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_NATURAL_GTE();
            if (result2 === null) {
              result2 = parse_ESCAPED_GTE();
              if (result2 === null) {
                result2 = parse_NATURAL_GT();
                if (result2 === null) {
                  result2 = parse_ESCAPED_GT();
                  if (result2 === null) {
                    result2 = parse_LESS_THAN_EQUALS();
                    if (result2 === null) {
                      result2 = parse_LESS_THAN();
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_rangeExpression();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("relationalExpression");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_rangeExpression() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_additiveExpression();
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_DOT_DOT();
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_additiveExpression();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("rangeExpression");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_additiveExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_multiplicativeExpression();
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_PLUS();
            if (result3 === null) {
              result3 = parse_MINUS();
            }
            if (result3 !== null) {
              result4 = parse___();
              if (result4 !== null) {
                result5 = parse_multiplicativeExpression();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_PLUS();
              if (result3 === null) {
                result3 = parse_MINUS();
              }
              if (result3 !== null) {
                result4 = parse___();
                if (result4 !== null) {
                  result5 = parse_multiplicativeExpression();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("additiveExpression");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_multiplicativeExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_unaryExpression();
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_TIMES();
            if (result3 === null) {
              result3 = parse_DIVIDE();
              if (result3 === null) {
                result3 = parse_PERCENT();
              }
            }
            if (result3 !== null) {
              result4 = parse___();
              if (result4 !== null) {
                result5 = parse_unaryExpression();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_TIMES();
              if (result3 === null) {
                result3 = parse_DIVIDE();
                if (result3 === null) {
                  result3 = parse_PERCENT();
                }
              }
              if (result3 !== null) {
                result4 = parse___();
                if (result4 !== null) {
                  result5 = parse_unaryExpression();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("multiplicativeExpression");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_unaryExpression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse___();
        if (result0 !== null) {
          result1 = parse_unaryPlusMinusExpression();
          if (result1 === null) {
            result1 = parse_notExpression();
            if (result1 === null) {
              result1 = parse_primaryExpression();
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ws1, exp, ws2) {
        			var node = new SyntaxNode("unaryExpression");
        			node.addChild(ws1);
        			node.addChild(exp);
        			node.addChild(ws2);
        			return node.fold();	
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_unaryPlusMinusExpression() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_PLUS();
        if (result0 === null) {
          result0 = parse_MINUS();
        }
        if (result0 !== null) {
          result1 = parse_primaryExpression();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new SyntaxNode("unaryPlusMinusExpression");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_notExpression() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result1 = parse_EXCLAM();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_EXCLAM();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_primaryExpression();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new SyntaxNode("notExpression");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_primaryExpression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_NUMBER_LITERAL();
        if (result0 === null) {
          result0 = parse_hashLiteral();
          if (result0 === null) {
            result0 = parse_listLiteral();
            if (result0 === null) {
              result0 = parse_stringLiteral();
              if (result0 === null) {
                result0 = parse_parenthesis();
                if (result0 === null) {
                  result0 = parse_booleanLiteral();
                  if (result0 === null) {
                    result0 = parse_identifier();
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_addSubExpression();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_addSubExpression();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new SyntaxNode("primaryExpression");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_addSubExpression() {
        var result0;
        
        result0 = parse_dynamicKey();
        if (result0 === null) {
          result0 = parse_methodArgs();
          if (result0 === null) {
            result0 = parse_builtIn();
            if (result0 === null) {
              result0 = parse_defaultTo();
              if (result0 === null) {
                result0 = parse_EXISTS();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_dynamicKey() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPEN_BRACKET();
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            result2 = parse_CLOSE_BRACKET();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("dynamicKey");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_methodArgs() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPEN_PAREN();
        if (result0 !== null) {
          result1 = parse_positionalArgs();
          if (result1 !== null) {
            result2 = parse_CLOSE_PAREN();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("methodArgs");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_builtIn() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_BUILT_IN();
        if (result0 !== null) {
          result1 = parse_builtInOption();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new SyntaxNode("builtIn");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_defaultTo() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_terminatingExclam();
        if (result0 === null) {
          result0 = parse_EXCLAM();
        }
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new SyntaxNode("defaultTo");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_identifierDefinition() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_IDENTIFIER();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ws1, ident, ws2) {
        			var identName = ident.text;
        			// markIdent(identName);		
        			var node = new IdentifierDefinitionNode("identifierDefinition", identName);
        			node.addChild(ident);
        			return node;
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identifierDefinition");
        }
        return result0;
      }
      
      function parse_listIdentifierDefinition() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_IDENTIFIER();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ws1, ident, ws2) {
        			var identName = ident.text;
        			// pushListIdentifier(identName);		
        			var node = new ListIdentifierDefinitionNode("listIdentifierDefinition", identName);			
        			return node;
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("listIdentifierDefinition");
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_IDENTIFIER();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ws1, ident, ws2) {
        			var identName = ident.text;
        			var node = new IdentifierNode("identifier", identName);					
        			node.addChild(ident);
        			return node;
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identifier");
        }
        return result0;
      }
      
      function parse_listLiteral() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPEN_BRACKET();
        if (result0 !== null) {
          result1 = parse_positionalArgs();
          if (result1 !== null) {
            result2 = parse_CLOSE_BRACKET();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("listLiteral");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_positionalArgs() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_expression();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_expression();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_expression();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new SyntaxNode("positionalArgs");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_parenthesis() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPEN_PAREN();
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            result2 = parse_CLOSE_PAREN();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c) {
        			var node = new SyntaxNode("parenthesis");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_hashLiteral() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPEN_BRACE();
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            result2 = parse_hashLiteralElement();
            if (result2 !== null) {
              result3 = [];
              pos2 = clone(pos);
              result4 = parse_COMMA();
              if (result4 !== null) {
                result5 = parse_expression();
                if (result5 !== null) {
                  result6 = parse_hashLiteralElement();
                  if (result6 !== null) {
                    result4 = [result4, result5, result6];
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
              } else {
                result4 = null;
                pos = clone(pos2);
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = clone(pos);
                result4 = parse_COMMA();
                if (result4 !== null) {
                  result5 = parse_expression();
                  if (result5 !== null) {
                    result6 = parse_hashLiteralElement();
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
              }
              if (result3 !== null) {
                result4 = parse_CLOSE_BRACE();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b, c, d, e) {
        			var node = new SyntaxNode("hashLiteral");
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			node.addChild(d);
        			node.addChild(e);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_hashLiteralElement() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_COMMA();
        if (result0 === null) {
          result0 = parse_COLON();
        }
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a, b) {
        			var node = new SyntaxNode("hashLiteralElement");
        			node.addChild(a);
        			node.addChild(b);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_terminatingExclam() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_EXCLAM();
          if (result1 !== null) {
            result2 = parse_$__();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ws1, name, ws2) {
        			return new SyntaxNode("terminatingExclam");
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_builtInOption() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        result0 = parse_IDENTIFIER();
        if (result0 !== null) {
          result0 = (function(offset, line, column, builtin) {	
        			var node = new SyntaxNode("builtInOption");
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("builtInOption");
        }
        return result0;
      }
      
      function parse_stringLiteral() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_STRING_START();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_NEWLINE();
            if (result3 === null) {
              result3 = parse_stringContent();
            }
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_NEWLINE();
              if (result3 === null) {
                result3 = parse_stringContent();
              }
            }
            if (result2 !== null) {
              result3 = parse_STRING_END();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ws, a, b, c) {
        			var node = new SyntaxNode("stringLiteral");
        			node.addChild(ws);
        			node.addChild(a);
        			node.addChild(b);
        			node.addChild(c);
        			return node.fold();
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = (function(offset, line, column) {return catchError();})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_STRING_START();
              if (result2 !== null) {
                result3 = [];
                result4 = parse_stringErrorToken();
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_stringErrorToken();
                }
                if (result3 !== null) {
                  result4 = parse_STRING_END();
                  result4 = result4 !== null ? result4 : "";
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, ws, a, b, c) {
          			var node = new ErrorNode("InvalidStringLiteral");
          			node.setErrorMessage("Invalid string literal");
          			node.setHelpLink("http://freemarker.sourceforge.net/docs/dgui_template_exp.html#dgui_template_exp_direct_string");
          			node.addChild(ws);
          			node.addChild(a);
          			node.addChild(b);
          			node.addChild(c);
          			return node;
          		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_booleanLiteral() {
        var result0;
        
        result0 = parse_TRUE();
        if (result0 === null) {
          result0 = parse_FALSE();
        }
        return result0;
      }
      
      function parse_stringContent() {
        var result0;
        
        result0 = parse_STRING_SEQ_MATCH();
        if (result0 === null) {
          result0 = parse_ESCAPED_CHAR();
        }
        return result0;
      }
      
      function parse_stringErrorToken() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        result0 = parse_STRING_END();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_stringContent();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_fmExpressionErrorToken() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        result0 = parse_EXPRESSION_CLOSE();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_anyToken();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_inTagErrorTokens() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_anyToken();
        if (result0 !== null) {
          result0 = (function(offset, line, column, tok) {
        			if (tok.isInstanceOf(FMTokenNode)) {
        				return null;
        			}
        			else {
        				return tok;	
        			}			
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_tillTagClose() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = [];
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        result1 = parse_TAG_CLOSE();
        reportFailures--;
        if (result1 === null) {
          result1 = "";
        } else {
          result1 = null;
          pos = clone(pos2);
        }
        if (result1 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          result2 = parse_TAG_CLOSE_SELF();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            result3 = parse_TAG_CLOSE_CLOSE();
            reportFailures--;
            if (result3 === null) {
              result3 = "";
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            if (result3 !== null) {
              result4 = parse_anyToken();
              if (result4 !== null) {
                result1 = [result1, result2, result3, result4];
              } else {
                result1 = null;
                pos = clone(pos1);
              }
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          } else {
            result1 = null;
            pos = clone(pos1);
          }
        } else {
          result1 = null;
          pos = clone(pos1);
        }
        while (result1 !== null) {
          result0.push(result1);
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          result1 = parse_TAG_CLOSE();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_TAG_CLOSE_SELF();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              result3 = parse_TAG_CLOSE_CLOSE();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 !== null) {
                result4 = parse_anyToken();
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = clone(pos1);
                }
              } else {
                result1 = null;
                pos = clone(pos1);
              }
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          } else {
            result1 = null;
            pos = clone(pos1);
          }
        }
        if (result0 !== null) {
          result1 = parse_TAG_CLOSE();
          if (result1 === null) {
            result1 = parse_TAG_CLOSE_SELF();
            if (result1 === null) {
              result1 = parse_TAG_CLOSE_CLOSE();
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_anyToken() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 60) {
          result0 = "<";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          pos3 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 45) {
            result2 = "-";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = clone(pos);
              pos3 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 45) {
                result2 = "-";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = clone(pos3);
              }
              if (result2 !== null) {
                if (input.length > pos.offset) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 45) {
              result2 = "-";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_index();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 62) {
                  result4 = ">";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        result1 = parse_WS();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_WS();
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) {
        			var node = new SyntaxNode("_");
        			node.addChild(a);
        			return node;
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse___() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        result1 = parse_$__();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_$__();
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) {
        			// Avoiding AST overpopulation
        			if (a.length == 0)  {
        				return "";
        			}
        			else {
        				var node = new SyntaxNode("__");
        				node.addChild(a);
        				return node.fold();
        			}
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_$__() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_WS();
        if (result1 === null) {
          result1 = parse_NEWLINE();
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_WS();
            if (result1 === null) {
              result1 = parse_NEWLINE();
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) {
        			var node = new SyntaxNode("$__");
        			node.addChild(a);
        			return node;
        
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WS() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "<WS-") {
          result0 = "<WS-";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<WS-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("WS");
        }
        return result0;
      }
      
      function parse_NUMBER_LITERAL() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 16) === "<NUMBER_LITERAL-") {
          result0 = "<NUMBER_LITERAL-";
          advance(pos, 16);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<NUMBER_LITERAL-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("NUMBER_LITERAL");
        }
        return result0;
      }
      
      function parse_FM_COMMENT_CONTENT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 20) === "<FM_COMMENT_CONTENT-") {
          result0 = "<FM_COMMENT_CONTENT-";
          advance(pos, 20);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<FM_COMMENT_CONTENT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("FM_COMMENT_CONTENT");
        }
        return result0;
      }
      
      function parse_NEWLINE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 9) === "<NEWLINE-") {
          result0 = "<NEWLINE-";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<NEWLINE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("NEWLINE");
        }
        return result0;
      }
      
      function parse_PCDATA() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "<PCDATA-") {
          result0 = "<PCDATA-";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<PCDATA-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("PCDATA");
        }
        return result0;
      }
      
      function parse_IDENTIFIER() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 12) === "<IDENTIFIER-") {
          result0 = "<IDENTIFIER-";
          advance(pos, 12);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<IDENTIFIER-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("IDENTIFIER");
        }
        return result0;
      }
      
      function parse_ESCAPED_CHAR() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 14) === "<ESCAPED_CHAR-") {
          result0 = "<ESCAPED_CHAR-";
          advance(pos, 14);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<ESCAPED_CHAR-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("ESCAPED_CHAR");
        }
        return result0;
      }
      
      function parse_STRING_START() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 14) === "<STRING_START-") {
          result0 = "<STRING_START-";
          advance(pos, 14);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<STRING_START-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("STRING_START");
        }
        return result0;
      }
      
      function parse_STRING_SEQ_MATCH() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 18) === "<STRING_SEQ_MATCH-") {
          result0 = "<STRING_SEQ_MATCH-";
          advance(pos, 18);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<STRING_SEQ_MATCH-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("STRING_SEQ_MATCH");
        }
        return result0;
      }
      
      function parse_STRING_END() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 12) === "<STRING_END-") {
          result0 = "<STRING_END-";
          advance(pos, 12);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<STRING_END-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("STRING_END");
        }
        return result0;
      }
      
      function parse_TAG_OPEN() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 10) === "<TAG_OPEN-") {
          result0 = "<TAG_OPEN-";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<TAG_OPEN-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("TAG_OPEN");
        }
        return result0;
      }
      
      function parse_ASSIGN_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 12) === "<ASSIGN_TAG-") {
          result0 = "<ASSIGN_TAG-";
          advance(pos, 12);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<ASSIGN_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("ASSIGN_TAG");
        }
        return result0;
      }
      
      function parse_COMPRESS_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 14) === "<COMPRESS_TAG-") {
          result0 = "<COMPRESS_TAG-";
          advance(pos, 14);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<COMPRESS_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("COMPRESS_TAG");
        }
        return result0;
      }
      
      function parse_LIST_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 10) === "<LIST_TAG-") {
          result0 = "<LIST_TAG-";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<LIST_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("LIST_TAG");
        }
        return result0;
      }
      
      function parse_IF_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "<IF_TAG-") {
          result0 = "<IF_TAG-";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<IF_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("IF_TAG");
        }
        return result0;
      }
      
      function parse_ELSE_IF_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 13) === "<ELSE_IF_TAG-") {
          result0 = "<ELSE_IF_TAG-";
          advance(pos, 13);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<ELSE_IF_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("ELSE_IF_TAG");
        }
        return result0;
      }
      
      function parse_ELSE_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 10) === "<ELSE_TAG-") {
          result0 = "<ELSE_TAG-";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<ELSE_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("ELSE_TAG");
        }
        return result0;
      }
      
      function parse_LIST_CLOSE_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 16) === "<LIST_CLOSE_TAG-") {
          result0 = "<LIST_CLOSE_TAG-";
          advance(pos, 16);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<LIST_CLOSE_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("LIST_CLOSE_TAG");
        }
        return result0;
      }
      
      function parse_IF_CLOSE_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 14) === "<IF_CLOSE_TAG-") {
          result0 = "<IF_CLOSE_TAG-";
          advance(pos, 14);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<IF_CLOSE_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("IF_CLOSE_TAG");
        }
        return result0;
      }
      
      function parse_COMPRESS_CLOSE_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 20) === "<COMPRESS_CLOSE_TAG-") {
          result0 = "<COMPRESS_CLOSE_TAG-";
          advance(pos, 20);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<COMPRESS_CLOSE_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("COMPRESS_CLOSE_TAG");
        }
        return result0;
      }
      
      function parse_END_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 9) === "<END_TAG-") {
          result0 = "<END_TAG-";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<END_TAG-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("END_TAG");
        }
        return result0;
      }
      
      function parse_TAG_CLOSE_CLOSE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 17) === "<TAG_CLOSE_CLOSE-") {
          result0 = "<TAG_CLOSE_CLOSE-";
          advance(pos, 17);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<TAG_CLOSE_CLOSE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("TAG_CLOSE_CLOSE");
        }
        return result0;
      }
      
      function parse_TAG_CLOSE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 11) === "<TAG_CLOSE-") {
          result0 = "<TAG_CLOSE-";
          advance(pos, 11);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<TAG_CLOSE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("TAG_CLOSE");
        }
        return result0;
      }
      
      function parse_TAG_CLOSE_SELF() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 16) === "<TAG_CLOSE_SELF-") {
          result0 = "<TAG_CLOSE_SELF-";
          advance(pos, 16);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<TAG_CLOSE_SELF-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("TAG_CLOSE_SELF");
        }
        return result0;
      }
      
      function parse_COMMENT_OPEN() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 14) === "<COMMENT_OPEN-") {
          result0 = "<COMMENT_OPEN-";
          advance(pos, 14);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<COMMENT_OPEN-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("COMMENT_OPEN");
        }
        return result0;
      }
      
      function parse_COMMENT_CLOSE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 15) === "<COMMENT_CLOSE-") {
          result0 = "<COMMENT_CLOSE-";
          advance(pos, 15);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<COMMENT_CLOSE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("COMMENT_CLOSE");
        }
        return result0;
      }
      
      function parse_EXPRESSION_OPEN() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 17) === "<EXPRESSION_OPEN-") {
          result0 = "<EXPRESSION_OPEN-";
          advance(pos, 17);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<EXPRESSION_OPEN-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("EXPRESSION_OPEN");
        }
        return result0;
      }
      
      function parse_EXPRESSION_CLOSE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 18) === "<EXPRESSION_CLOSE-") {
          result0 = "<EXPRESSION_CLOSE-";
          advance(pos, 18);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<EXPRESSION_CLOSE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("EXPRESSION_CLOSE");
        }
        return result0;
      }
      
      function parse_ANY_CHAR() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 10) === "<ANY_CHAR-") {
          result0 = "<ANY_CHAR-";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<ANY_CHAR-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("ANY_CHAR");
        }
        return result0;
      }
      
      function parse_EQUALS() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "<EQUALS-") {
          result0 = "<EQUALS-";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<EQUALS-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("EQUALS");
        }
        return result0;
      }
      
      function parse_LESS_THAN() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 11) === "<LESS_THAN-") {
          result0 = "<LESS_THAN-";
          advance(pos, 11);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<LESS_THAN-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("LESS_THAN");
        }
        return result0;
      }
      
      function parse_LESS_THAN_EQUALS() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 18) === "<LESS_THAN_EQUALS-") {
          result0 = "<LESS_THAN_EQUALS-";
          advance(pos, 18);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<LESS_THAN_EQUALS-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("LESS_THAN_EQUALS");
        }
        return result0;
      }
      
      function parse_ESCAPED_GT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 12) === "<ESCAPED_GT-") {
          result0 = "<ESCAPED_GT-";
          advance(pos, 12);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<ESCAPED_GT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("ESCAPED_GT");
        }
        return result0;
      }
      
      function parse_ESCAPED_GTE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 13) === "<ESCAPED_GTE-") {
          result0 = "<ESCAPED_GTE-";
          advance(pos, 13);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<ESCAPED_GTE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("ESCAPED_GTE");
        }
        return result0;
      }
      
      function parse_OPEN_PAREN() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 12) === "<OPEN_PAREN-") {
          result0 = "<OPEN_PAREN-";
          advance(pos, 12);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<OPEN_PAREN-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("OPEN_PAREN");
        }
        return result0;
      }
      
      function parse_CLOSE_PAREN() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 13) === "<CLOSE_PAREN-") {
          result0 = "<CLOSE_PAREN-";
          advance(pos, 13);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<CLOSE_PAREN-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("CLOSE_PAREN");
        }
        return result0;
      }
      
      function parse_OPEN_BRACKET() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 14) === "<OPEN_BRACKET-") {
          result0 = "<OPEN_BRACKET-";
          advance(pos, 14);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<OPEN_BRACKET-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("OPEN_BRACKET");
        }
        return result0;
      }
      
      function parse_CLOSE_BRACKET() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 15) === "<CLOSE_BRACKET-") {
          result0 = "<CLOSE_BRACKET-";
          advance(pos, 15);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<CLOSE_BRACKET-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("CLOSE_BRACKET");
        }
        return result0;
      }
      
      function parse_OPEN_BRACE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 12) === "<OPEN_BRACE-") {
          result0 = "<OPEN_BRACE-";
          advance(pos, 12);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<OPEN_BRACE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("OPEN_BRACE");
        }
        return result0;
      }
      
      function parse_CLOSE_BRACE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 13) === "<CLOSE_BRACE-") {
          result0 = "<CLOSE_BRACE-";
          advance(pos, 13);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<CLOSE_BRACE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("CLOSE_BRACE");
        }
        return result0;
      }
      
      function parse_COMMA() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "<COMMA-") {
          result0 = "<COMMA-";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<COMMA-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("COMMA");
        }
        return result0;
      }
      
      function parse_SEMICOLON() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 11) === "<SEMICOLON-") {
          result0 = "<SEMICOLON-";
          advance(pos, 11);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<SEMICOLON-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("SEMICOLON");
        }
        return result0;
      }
      
      function parse_COLON() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "<COLON-") {
          result0 = "<COLON-";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<COLON-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("COLON");
        }
        return result0;
      }
      
      function parse_DOT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "<DOT-") {
          result0 = "<DOT-";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<DOT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("DOT");
        }
        return result0;
      }
      
      function parse_DOT_DOT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 9) === "<DOT_DOT-") {
          result0 = "<DOT_DOT-";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<DOT_DOT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("DOT_DOT");
        }
        return result0;
      }
      
      function parse_DOUBLE_STAR() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 13) === "<DOUBLE_STAR-") {
          result0 = "<DOUBLE_STAR-";
          advance(pos, 13);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<DOUBLE_STAR-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("DOUBLE_STAR");
        }
        return result0;
      }
      
      function parse_EXCLAM() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "<EXCLAM-") {
          result0 = "<EXCLAM-";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<EXCLAM-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("EXCLAM");
        }
        return result0;
      }
      
      function parse_PLUS() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "<PLUS-") {
          result0 = "<PLUS-";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<PLUS-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("PLUS");
        }
        return result0;
      }
      
      function parse_MINUS() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "<MINUS-") {
          result0 = "<MINUS-";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<MINUS-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("MINUS");
        }
        return result0;
      }
      
      function parse_TIMES() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "<TIMES-") {
          result0 = "<TIMES-";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<TIMES-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("TIMES");
        }
        return result0;
      }
      
      function parse_DIVIDE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "<DIVIDE-") {
          result0 = "<DIVIDE-";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<DIVIDE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("DIVIDE");
        }
        return result0;
      }
      
      function parse_PERCENT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 9) === "<PERCENT-") {
          result0 = "<PERCENT-";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<PERCENT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("PERCENT");
        }
        return result0;
      }
      
      function parse_BUILT_IN() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 10) === "<BUILT_IN-") {
          result0 = "<BUILT_IN-";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<BUILT_IN-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("BUILT_IN");
        }
        return result0;
      }
      
      function parse_EXISTS() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "<EXISTS-") {
          result0 = "<EXISTS-";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<EXISTS-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("EXISTS");
        }
        return result0;
      }
      
      function parse_NATURAL_GT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 12) === "<NATURAL_GT-") {
          result0 = "<NATURAL_GT-";
          advance(pos, 12);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<NATURAL_GT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("NATURAL_GT");
        }
        return result0;
      }
      
      function parse_NATURAL_GTE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 13) === "<NATURAL_GTE-") {
          result0 = "<NATURAL_GTE-";
          advance(pos, 13);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<NATURAL_GTE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("NATURAL_GTE");
        }
        return result0;
      }
      
      function parse_DOUBLE_EQUALS() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 15) === "<DOUBLE_EQUALS-") {
          result0 = "<DOUBLE_EQUALS-";
          advance(pos, 15);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<DOUBLE_EQUALS-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("DOUBLE_EQUALS");
        }
        return result0;
      }
      
      function parse_NOT_EQUALS() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 12) === "<NOT_EQUALS-") {
          result0 = "<NOT_EQUALS-";
          advance(pos, 12);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<NOT_EQUALS-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("NOT_EQUALS");
        }
        return result0;
      }
      
      function parse_AND() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "<AND-") {
          result0 = "<AND-";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<AND-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("AND");
        }
        return result0;
      }
      
      function parse_OR() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "<OR-") {
          result0 = "<OR-";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<OR-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("OR");
        }
        return result0;
      }
      
      function parse_IN() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "<IN-") {
          result0 = "<IN-";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<IN-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("IN");
        }
        return result0;
      }
      
      function parse_AS() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "<AS-") {
          result0 = "<AS-";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<AS-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("AS");
        }
        return result0;
      }
      
      function parse_USING() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "<USING-") {
          result0 = "<USING-";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<USING-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("USING");
        }
        return result0;
      }
      
      function parse_FALSE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "<FALSE-") {
          result0 = "<FALSE-";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<FALSE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("FALSE");
        }
        return result0;
      }
      
      function parse_TRUE() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "<TRUE-") {
          result0 = "<TRUE-";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<TRUE-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("TRUE");
        }
        return result0;
      }
      
      function parse_DATE_UTILS_IDENT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 18) === "<DATE_UTILS_IDENT-") {
          result0 = "<DATE_UTILS_IDENT-";
          advance(pos, 18);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<DATE_UTILS_IDENT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("DATE_UTILS_IDENT");
        }
        return result0;
      }
      
      function parse_MARKET_DATA_IDENT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 19) === "<MARKET_DATA_IDENT-") {
          result0 = "<MARKET_DATA_IDENT-";
          advance(pos, 19);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<MARKET_DATA_IDENT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("MARKET_DATA_IDENT");
        }
        return result0;
      }
      
      function parse_REPORT_DATA_IDENT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 19) === "<REPORT_DATA_IDENT-") {
          result0 = "<REPORT_DATA_IDENT-";
          advance(pos, 19);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<REPORT_DATA_IDENT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("REPORT_DATA_IDENT");
        }
        return result0;
      }
      
      function parse_BUNDLE_IDENT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 14) === "<BUNDLE_IDENT-") {
          result0 = "<BUNDLE_IDENT-";
          advance(pos, 14);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<BUNDLE_IDENT-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_index();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {
        			return getTokenNodeById(id);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("BUNDLE_IDENT");
        }
        return result0;
      }
      
      function parse_index() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) {
        			return a.join("");
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("index");
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      		// Overriding clone for better performance.
      		// TODO, not needed after switch to PEGjs 0.8.0
      		clone = function (pos) {
      			return { 
      				offset: pos.offset, 
      				line: pos.line, 
      				column: pos.column, 
      				seenCR: pos.seenCR 
      			};
      		}
      
      		var connector = arguments[2];
      		var catchErrors = connector.getCatchErrors();
      
      		function catchError() {
      			return catchErrors;
      		}
      		
      		var tokenArr = connector.getTokenArray();
      		function getTokenNodeById(id) {
      			return tokenArr[id * 1];
      		}
      	
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
	return fmparser;
});