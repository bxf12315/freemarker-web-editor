define([ "./connector-lexer", "./ast-nodes", "./lexer-states" ], function () {
fmlexer = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "lexerState": parse_lexerState,
        "lexerStateFMTokens": parse_lexerStateFMTokens,
        "IDENTIFIER": parse_IDENTIFIER,
        "COMMENT_OPEN": parse_COMMENT_OPEN,
        "FM_COMMENT_CONTENT": parse_FM_COMMENT_CONTENT,
        "FM_COMMENT_MATCH": parse_FM_COMMENT_MATCH,
        "COMMENT_CLOSE": parse_COMMENT_CLOSE,
        "EXPRESSION_OPEN": parse_EXPRESSION_OPEN,
        "EXPRESSION_CLOSE": parse_EXPRESSION_CLOSE,
        "ASSIGN_TAG": parse_ASSIGN_TAG,
        "COMPRESS_TAG": parse_COMPRESS_TAG,
        "LIST_TAG": parse_LIST_TAG,
        "IF_TAG": parse_IF_TAG,
        "ELSE_IF_TAG": parse_ELSE_IF_TAG,
        "ELSE_TAG": parse_ELSE_TAG,
        "TAG_OPEN": parse_TAG_OPEN,
        "LIST_CLOSE_TAG": parse_LIST_CLOSE_TAG,
        "IF_CLOSE_TAG": parse_IF_CLOSE_TAG,
        "COMPRESS_CLOSE_TAG": parse_COMPRESS_CLOSE_TAG,
        "END_TAG": parse_END_TAG,
        "TAG_CLOSE_CLOSE": parse_TAG_CLOSE_CLOSE,
        "TAG_CLOSE": parse_TAG_CLOSE,
        "TAG_CLOSE_SELF": parse_TAG_CLOSE_SELF,
        "STRING_START": parse_STRING_START,
        "STRING_END": parse_STRING_END,
        "STRING_SEQ_MATCH": parse_STRING_SEQ_MATCH,
        "STRING_MATCH": parse_STRING_MATCH,
        "ESCAPED_CHAR": parse_ESCAPED_CHAR,
        "NATURAL_GT": parse_NATURAL_GT,
        "NATURAL_GTE": parse_NATURAL_GTE,
        "DOUBLE_EQUALS": parse_DOUBLE_EQUALS,
        "EQUALS": parse_EQUALS,
        "LESS_THAN": parse_LESS_THAN,
        "LESS_THAN_EQUALS": parse_LESS_THAN_EQUALS,
        "ESCAPED_GT": parse_ESCAPED_GT,
        "ESCAPED_GTE": parse_ESCAPED_GTE,
        "OPEN_PAREN": parse_OPEN_PAREN,
        "CLOSE_PAREN": parse_CLOSE_PAREN,
        "OPEN_BRACKET": parse_OPEN_BRACKET,
        "CLOSE_BRACKET": parse_CLOSE_BRACKET,
        "OPEN_BRACE": parse_OPEN_BRACE,
        "CLOSE_BRACE": parse_CLOSE_BRACE,
        "COMMA": parse_COMMA,
        "SEMICOLON": parse_SEMICOLON,
        "COLON": parse_COLON,
        "DOT": parse_DOT,
        "DOT_DOT": parse_DOT_DOT,
        "NOT_EQUALS": parse_NOT_EQUALS,
        "EXCLAM": parse_EXCLAM,
        "PLUS": parse_PLUS,
        "MINUS": parse_MINUS,
        "DOUBLE_STAR": parse_DOUBLE_STAR,
        "TIMES": parse_TIMES,
        "DIVIDE": parse_DIVIDE,
        "PERCENT": parse_PERCENT,
        "BUILT_IN": parse_BUILT_IN,
        "EXISTS": parse_EXISTS,
        "AND": parse_AND,
        "OR": parse_OR,
        "IN": parse_IN,
        "AS": parse_AS,
        "USING": parse_USING,
        "FALSE": parse_FALSE,
        "TRUE": parse_TRUE,
        "LETTER": parse_LETTER,
        "DIGIT": parse_DIGIT,
        "NEWLINE": parse_NEWLINE,
        "PCDATA": parse_PCDATA,
        "PCDATA_CHAR": parse_PCDATA_CHAR,
        "NUMBER_LITERAL": parse_NUMBER_LITERAL,
        "DECIMAL": parse_DECIMAL,
        "INTEGER": parse_INTEGER,
        "WSOPT": parse_WSOPT,
        "WS": parse_WS,
        "ANY_CHAR": parse_ANY_CHAR
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "lexerState";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_lexerState() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        result1 = parse_NEWLINE();
        if (result1 === null) {
          result1 = parse_PCDATA();
          if (result1 === null) {
            result1 = parse_lexerStateFMTokens();
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_NEWLINE();
          if (result1 === null) {
            result1 = parse_PCDATA();
            if (result1 === null) {
              result1 = parse_lexerStateFMTokens();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, nodes) {
        			return nodes;
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_lexerStateFMTokens() {
        var result0;
        
        result0 = parse_COMMENT_OPEN();
        if (result0 === null) {
          result0 = parse_FM_COMMENT_CONTENT();
          if (result0 === null) {
            result0 = parse_COMMENT_CLOSE();
            if (result0 === null) {
              result0 = parse_EXPRESSION_OPEN();
              if (result0 === null) {
                result0 = parse_EXPRESSION_CLOSE();
                if (result0 === null) {
                  result0 = parse_STRING_START();
                  if (result0 === null) {
                    result0 = parse_ESCAPED_CHAR();
                    if (result0 === null) {
                      result0 = parse_STRING_SEQ_MATCH();
                      if (result0 === null) {
                        result0 = parse_STRING_END();
                        if (result0 === null) {
                          result0 = parse_ASSIGN_TAG();
                          if (result0 === null) {
                            result0 = parse_COMPRESS_TAG();
                            if (result0 === null) {
                              result0 = parse_LIST_TAG();
                              if (result0 === null) {
                                result0 = parse_IF_TAG();
                                if (result0 === null) {
                                  result0 = parse_ELSE_IF_TAG();
                                  if (result0 === null) {
                                    result0 = parse_ELSE_TAG();
                                    if (result0 === null) {
                                      result0 = parse_TAG_OPEN();
                                      if (result0 === null) {
                                        result0 = parse_IF_CLOSE_TAG();
                                        if (result0 === null) {
                                          result0 = parse_COMPRESS_CLOSE_TAG();
                                          if (result0 === null) {
                                            result0 = parse_LIST_CLOSE_TAG();
                                            if (result0 === null) {
                                              result0 = parse_END_TAG();
                                              if (result0 === null) {
                                                result0 = parse_NATURAL_GT();
                                                if (result0 === null) {
                                                  result0 = parse_NATURAL_GTE();
                                                  if (result0 === null) {
                                                    result0 = parse_TAG_CLOSE_CLOSE();
                                                    if (result0 === null) {
                                                      result0 = parse_TAG_CLOSE();
                                                      if (result0 === null) {
                                                        result0 = parse_TAG_CLOSE_SELF();
                                                        if (result0 === null) {
                                                          result0 = parse_DOUBLE_EQUALS();
                                                          if (result0 === null) {
                                                            result0 = parse_EQUALS();
                                                            if (result0 === null) {
                                                              result0 = parse_LESS_THAN();
                                                              if (result0 === null) {
                                                                result0 = parse_LESS_THAN_EQUALS();
                                                                if (result0 === null) {
                                                                  result0 = parse_ESCAPED_GT();
                                                                  if (result0 === null) {
                                                                    result0 = parse_ESCAPED_GTE();
                                                                    if (result0 === null) {
                                                                      result0 = parse_OPEN_PAREN();
                                                                      if (result0 === null) {
                                                                        result0 = parse_CLOSE_PAREN();
                                                                        if (result0 === null) {
                                                                          result0 = parse_OPEN_BRACKET();
                                                                          if (result0 === null) {
                                                                            result0 = parse_CLOSE_BRACKET();
                                                                            if (result0 === null) {
                                                                              result0 = parse_OPEN_BRACE();
                                                                              if (result0 === null) {
                                                                                result0 = parse_CLOSE_BRACE();
                                                                                if (result0 === null) {
                                                                                  result0 = parse_COMMA();
                                                                                  if (result0 === null) {
                                                                                    result0 = parse_SEMICOLON();
                                                                                    if (result0 === null) {
                                                                                      result0 = parse_COLON();
                                                                                      if (result0 === null) {
                                                                                        result0 = parse_DOT_DOT();
                                                                                        if (result0 === null) {
                                                                                          result0 = parse_DOT();
                                                                                          if (result0 === null) {
                                                                                            result0 = parse_NOT_EQUALS();
                                                                                            if (result0 === null) {
                                                                                              result0 = parse_EXCLAM();
                                                                                              if (result0 === null) {
                                                                                                result0 = parse_PLUS();
                                                                                                if (result0 === null) {
                                                                                                  result0 = parse_MINUS();
                                                                                                  if (result0 === null) {
                                                                                                    result0 = parse_DOUBLE_STAR();
                                                                                                    if (result0 === null) {
                                                                                                      result0 = parse_TIMES();
                                                                                                      if (result0 === null) {
                                                                                                        result0 = parse_DIVIDE();
                                                                                                        if (result0 === null) {
                                                                                                          result0 = parse_PERCENT();
                                                                                                          if (result0 === null) {
                                                                                                            result0 = parse_BUILT_IN();
                                                                                                            if (result0 === null) {
                                                                                                              result0 = parse_EXISTS();
                                                                                                              if (result0 === null) {
                                                                                                                result0 = parse_AND();
                                                                                                                if (result0 === null) {
                                                                                                                  result0 = parse_OR();
                                                                                                                  if (result0 === null) {
                                                                                                                    result0 = parse_FALSE();
                                                                                                                    if (result0 === null) {
                                                                                                                      result0 = parse_TRUE();
                                                                                                                      if (result0 === null) {
                                                                                                                        result0 = parse_IN();
                                                                                                                        if (result0 === null) {
                                                                                                                          result0 = parse_AS();
                                                                                                                          if (result0 === null) {
                                                                                                                            result0 = parse_USING();
                                                                                                                            if (result0 === null) {
                                                                                                                              result0 = parse_IDENTIFIER();
                                                                                                                              if (result0 === null) {
                                                                                                                                result0 = parse_NUMBER_LITERAL();
                                                                                                                                if (result0 === null) {
                                                                                                                                  result0 = parse_NEWLINE();
                                                                                                                                  if (result0 === null) {
                                                                                                                                    result0 = parse_WS();
                                                                                                                                    if (result0 === null) {
                                                                                                                                      result0 = parse_ANY_CHAR();
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_IDENTIFIER() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_LETTER();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_LETTER();
          if (result2 === null) {
            result2 = parse_DIGIT();
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_LETTER();
            if (result2 === null) {
              result2 = parse_DIGIT();
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) {
        			var identName = first + rest.join("");
        			return new TokenNode("IDENTIFIER", identName, offset, line, column);			
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("IDENTIFIER");
        }
        return result0;
      }
      
      function parse_COMMENT_OPEN() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 4) === "<#--") {
            result1 = "<#--";
            advance(pos, 4);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<#--\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			pushState(State.STATE_COMMENT);
        			return new FMTokenNode("COMMENT_OPEN", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_FM_COMMENT_CONTENT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_COMMENT))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          result2 = parse_FM_COMMENT_MATCH();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_FM_COMMENT_MATCH();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) {
        			return new TokenNode("FM_COMMENT_CONTENT", a.join(""), offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_FM_COMMENT_MATCH() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (input.substr(pos.offset, 3) === "-->") {
          result0 = "-->";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-->\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 10) {
            result1 = "\n";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            if (input.length > pos.offset) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) {
        			return a.join("");
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_COMMENT_CLOSE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_COMMENT))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 3) === "-->") {
            result1 = "-->";
            advance(pos, 3);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"-->\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			popState(State.STATE_COMMENT);
        			return new FMTokenNode("COMMENT_CLOSE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_EXPRESSION_OPEN() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "${") {
            result1 = "${";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"${\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			pushState(State.STATE_EXPRESSION);
        			return new FMTokenNode("EXPRESSION_OPEN", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_EXPRESSION_CLOSE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_EXPRESSION))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 125) {
            result1 = "}";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"}\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			popState(State.STATE_EXPRESSION);
        			return new FMTokenNode("EXPRESSION_CLOSE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ASSIGN_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "<#") {
            result1 = "<#";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<#\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 6) === "assign") {
              result2 = "assign";
              advance(pos, 6);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"assign\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag, name) {
        			pushState(State.STATE_TAG);
        			return new FMTokenNode("ASSIGN_TAG", tag + name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_COMPRESS_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "<#") {
            result1 = "<#";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<#\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 8) === "compress") {
              result2 = "compress";
              advance(pos, 8);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"compress\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag, name) {
        			pushState(State.STATE_TAG);
        			return new FMTokenNode("COMPRESS_TAG", tag + name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_LIST_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "<#") {
            result1 = "<#";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<#\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === "list") {
              result2 = "list";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"list\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag, name) {
        			pushState(State.STATE_TAG);
        			return new FMTokenNode("LIST_TAG", tag + name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IF_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "<#") {
            result1 = "<#";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<#\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "if") {
              result2 = "if";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"if\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag, name) {
        			pushState(State.STATE_TAG);
        			return new FMTokenNode("IF_TAG", tag + name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ELSE_IF_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "<#") {
            result1 = "<#";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<#\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 6) === "elseif") {
              result2 = "elseif";
              advance(pos, 6);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"elseif\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag, name) {
        			pushState(State.STATE_TAG);
        			return new FMTokenNode("ELSE_IF_TAG", tag + name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ELSE_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "<#") {
            result1 = "<#";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<#\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === "else") {
              result2 = "else";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"else\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag, name) {
        			pushState(State.STATE_TAG);
        			return new FMTokenNode("ELSE_TAG", tag + name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_TAG_OPEN() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "<#") {
            result1 = "<#";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<#\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			pushState(State.STATE_TAG);
        			return new FMTokenNode("TAG_OPEN", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_LIST_CLOSE_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 3) === "</#") {
            result1 = "</#";
            advance(pos, 3);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"</#\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === "list") {
              result2 = "list";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"list\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag, name) {
        			pushState(State.STATE_CLOSE_TAG);
        			return new FMTokenNode("LIST_CLOSE_TAG", tag + name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IF_CLOSE_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 3) === "</#") {
            result1 = "</#";
            advance(pos, 3);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"</#\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "if") {
              result2 = "if";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"if\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag, name) {
        			pushState(State.STATE_CLOSE_TAG);
        			return new FMTokenNode("IF_CLOSE_TAG", tag + name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_COMPRESS_CLOSE_TAG() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 3) === "</#") {
            result1 = "</#";
            advance(pos, 3);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"</#\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 8) === "compress") {
              result2 = "compress";
              advance(pos, 8);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"compress\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag, name) {
        			pushState(State.STATE_CLOSE_TAG);
        			return new FMTokenNode("COMPRESS_CLOSE_TAG", tag + name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_END_TAG() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "</#") {
          result0 = "</#";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"</#\"");
          }
        }
        if (result0 !== null) {
          result1 = (function(offset, line, column, tag) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column, result0) ? "" : null;
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tag) {
        			pushState(State.STATE_CLOSE_TAG);
        			return new FMTokenNode("END_TAG", tag, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_TAG_CLOSE_CLOSE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_CLOSE_TAG))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 62) {
            result1 = ">";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\">\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			popState(State.STATE_CLOSE_TAG);
        			return new FMTokenNode("TAG_CLOSE_CLOSE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_TAG_CLOSE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_TAG))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 62) {
            result1 = ">";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\">\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			popState(State.STATE_TAG);
        			return new FMTokenNode("TAG_CLOSE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_TAG_CLOSE_SELF() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_TAG))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "/>") {
            result1 = "/>";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/>\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			popState(State.STATE_TAG);
        			return new FMTokenNode("TAG_CLOSE_SELF", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_STRING_START() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkSuperState(State.STATE_TAG) && !checkState(State.STATE_STRING))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 114) {
            result1 = "r";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"r\"");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 39) {
              result2 = "'";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 === null) {
              if (input.charCodeAt(pos.offset) === 34) {
                result2 = "\"";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, r, quote) {
        			pushState(State.STATE_STRING);
        			peekState().stringType = quote;
        			var rawChar = (typeof r != "undefined")? r : "";
        			return new TokenNode("STRING_START", rawChar + quote, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_STRING_END() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return checkState(State.STATE_STRING)})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 39) {
            result1 = "'";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 34) {
              result1 = "\"";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, quote) {
        			if (peekState().stringType == quote) {
        				popState(State.STATE_STRING);
        				return new TokenNode("STRING_END", quote, offset, line, column);
        			}
        			else {
        				return null; // Our string is of the other kind.
        			}
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_STRING_SEQ_MATCH() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return checkState(State.STATE_STRING)})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          result2 = parse_STRING_MATCH();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_STRING_MATCH();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) {
        			var node = new TokenNode("STRING_SEQ_MATCH", a.join(""), offset, line, column);
        			return node;
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_STRING_MATCH() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        result0 = parse_ESCAPED_CHAR();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 10) {
            result1 = "\n";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            if (input.length > pos.offset) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, a) {
        			var matchedChar = a.join("");
        			if (peekState().stringType != matchedChar) {
        				return matchedChar;
        			}
        			else {
        				return null;
        			}
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ESCAPED_CHAR() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return checkState(State.STATE_STRING)})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 92) {
            result1 = "\\";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 110) {
              result2 = "n";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"n\"");
              }
            }
            if (result2 === null) {
              if (input.charCodeAt(pos.offset) === 116) {
                result2 = "t";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"t\"");
                }
              }
              if (result2 === null) {
                if (input.charCodeAt(pos.offset) === 114) {
                  result2 = "r";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"r\"");
                  }
                }
                if (result2 === null) {
                  if (input.charCodeAt(pos.offset) === 102) {
                    result2 = "f";
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"f\"");
                    }
                  }
                  if (result2 === null) {
                    if (input.charCodeAt(pos.offset) === 98) {
                      result2 = "b";
                      advance(pos, 1);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"b\"");
                      }
                    }
                    if (result2 === null) {
                      if (input.charCodeAt(pos.offset) === 103) {
                        result2 = "g";
                        advance(pos, 1);
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"g\"");
                        }
                      }
                      if (result2 === null) {
                        if (input.charCodeAt(pos.offset) === 108) {
                          result2 = "l";
                          advance(pos, 1);
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"l\"");
                          }
                        }
                        if (result2 === null) {
                          if (input.charCodeAt(pos.offset) === 97) {
                            result2 = "a";
                            advance(pos, 1);
                          } else {
                            result2 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"a\"");
                            }
                          }
                          if (result2 === null) {
                            if (input.charCodeAt(pos.offset) === 92) {
                              result2 = "\\";
                              advance(pos, 1);
                            } else {
                              result2 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"\\\\\"");
                              }
                            }
                            if (result2 === null) {
                              if (input.charCodeAt(pos.offset) === 39) {
                                result2 = "'";
                                advance(pos, 1);
                              } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"'\"");
                                }
                              }
                              if (result2 === null) {
                                if (input.charCodeAt(pos.offset) === 34) {
                                  result2 = "\"";
                                  advance(pos, 1);
                                } else {
                                  result2 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"\\\"\"");
                                  }
                                }
                                if (result2 === null) {
                                  if (input.charCodeAt(pos.offset) === 36) {
                                    result2 = "$";
                                    advance(pos, 1);
                                  } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"$\"");
                                    }
                                  }
                                  if (result2 === null) {
                                    if (input.charCodeAt(pos.offset) === 123) {
                                      result2 = "{";
                                      advance(pos, 1);
                                    } else {
                                      result2 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"{\"");
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result2 === null) {
              pos2 = clone(pos);
              if (input.charCodeAt(pos.offset) === 120) {
                result2 = "x";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"x\"");
                }
              }
              if (result2 !== null) {
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
                if (result3 === null) {
                  if (/^[A-F]/.test(input.charAt(pos.offset))) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[A-F]");
                    }
                  }
                  if (result3 === null) {
                    if (/^[a-f]/.test(input.charAt(pos.offset))) {
                      result3 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("[a-f]");
                      }
                    }
                  }
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, esc, escSeq) {
        			if (typeof escSeq == "object") {
        				escSeq = escSeq.join("");
        			}
        			return new TokenNode("ESCAPED_CHAR", esc + escSeq, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NATURAL_GT() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PAREN))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 62) {
            result1 = ">";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\">\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("NATURAL_GT", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NATURAL_GTE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PAREN))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === ">=") {
            result1 = ">=";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\">=\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("NATURAL_GTE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DOUBLE_EQUALS() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "==") {
          result0 = "==";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"==\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("DOUBLE_EQUALS", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_EQUALS() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 61) {
          result0 = "=";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("EQUALS", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_LESS_THAN() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "lt") {
          result0 = "lt";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"lt\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 60) {
            result0 = "<";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"<\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("LESS_THAN", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_LESS_THAN_EQUALS() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "lte") {
          result0 = "lte";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"lte\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "<=") {
            result0 = "<=";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"<=\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("LESS_THAN_EQUALS", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ESCAPED_GT() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "gt") {
          result0 = "gt";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"gt\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("ESCAPED_GT", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ESCAPED_GTE() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "gte") {
          result0 = "gte";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"gte\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("ESCAPED_GTE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_OPEN_PAREN() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 40) {
          result0 = "(";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			pushState(State.STATE_PAREN);
        			return new TokenNode("OPEN_PAREN", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CLOSE_PAREN() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PAREN))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 41) {
            result1 = ")";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\")\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			popState(State.STATE_PAREN);
        			return new TokenNode("CLOSE_PAREN", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_OPEN_BRACKET() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			pushState(State.STATE_BRACKET);
        			return new TokenNode("OPEN_BRACKET", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CLOSE_BRACKET() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_BRACKET))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 93) {
            result1 = "]";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"]\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			popState(State.STATE_BRACKET);
        			return new TokenNode("CLOSE_BRACKET", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_OPEN_BRACE() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 123) {
          result0 = "{";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			pushState(State.STATE_BRACE);
        			return new TokenNode("OPEN_BRACE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CLOSE_BRACE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_BRACE))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 125) {
            result1 = "}";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"}\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			popState(State.STATE_BRACE);
        			return new TokenNode("CLOSE_BRACE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_COMMA() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 44) {
          result0 = ",";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("COMMA", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_SEMICOLON() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 59) {
          result0 = ";";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("SEMICOLON", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_COLON() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 58) {
          result0 = ":";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("COLON", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DOT() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("DOT", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DOT_DOT() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "..") {
          result0 = "..";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"..\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("DOT_DOT", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NOT_EQUALS() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "!=") {
          result0 = "!=";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!=\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("NOT_EQUALS", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_EXCLAM() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 33) {
          result0 = "!";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("EXCLAM", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_PLUS() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 43) {
          result0 = "+";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("PLUS", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_MINUS() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 45) {
          result0 = "-";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("MINUS", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DOUBLE_STAR() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "**") {
          result0 = "**";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"**\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("DOUBLE_STAR", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_TIMES() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 42) {
          result0 = "*";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("TIMES", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DIVIDE() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 47) {
          result0 = "/";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("DIVIDE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_PERCENT() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 37) {
          result0 = "%";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"%\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("PERCENT", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_BUILT_IN() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 63) {
          result0 = "?";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"?\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("BUILT_IN", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_EXISTS() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "??") {
          result0 = "??";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"??\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("EXISTS", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_AND() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "&&") {
          result0 = "&&";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"&&\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 38) {
            result0 = "&";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"&\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("AND", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_OR() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "||") {
          result0 = "||";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"||\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 124) {
            result0 = "|";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"|\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("OR", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IN() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "in") {
          result0 = "in";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"in\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (/^[a-zA_Z0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA_Z0-9]");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("IN", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_AS() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "as") {
          result0 = "as";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"as\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (/^[a-zA_Z0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA_Z0-9]");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("AS", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_USING() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "using") {
          result0 = "using";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"using\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (/^[a-zA_Z0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA_Z0-9]");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("USING", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_FALSE() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "false") {
          result0 = "false";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"false\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (/^[a-zA_Z0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA_Z0-9]");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("FALSE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_TRUE() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "true") {
          result0 = "true";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (/^[a-zA_Z0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA_Z0-9]");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("TRUE", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_LETTER() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[a-zA-Z_.]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z_.]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, letter) {
        			return letter;
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DIGIT() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digit) {
        			return digit;
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NEWLINE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 13) {
          result0 = "\r";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 10) {
            result1 = "\n";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) {
        			return new TokenNode("NEWLINE", value.join(""), offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_PCDATA() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = (function(offset, line, column) {return (checkState(State.STATE_PCDATA))})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          result2 = parse_PCDATA_CHAR();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_PCDATA_CHAR();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pcdata) {
        			return new TokenNode("PCDATA", pcdata.join(""), offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_PCDATA_CHAR() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (input.substr(pos.offset, 2) === "<#") {
          result0 = "<#";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<#\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          if (input.substr(pos.offset, 4) === "<#--") {
            result1 = "<#--";
            advance(pos, 4);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<#--\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 3) === "</#") {
              result2 = "</#";
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"</#\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.substr(pos.offset, 2) === "${") {
                result3 = "${";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"${\"");
                }
              }
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 10) {
                  result4 = "\n";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\n\"");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
                if (result4 !== null) {
                  if (input.length > pos.offset) {
                    result5 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("any character");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, b) {
        			return b.join("");
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NUMBER_LITERAL() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        result0 = parse_DECIMAL();
        if (result0 === null) {
          result0 = parse_INTEGER();
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, num) {
        			return new TokenNode("NUMBER_LITERAL", num.text, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("NUMBER_LITERAL");
        }
        return result0;
      }
      
      function parse_DECIMAL() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_INTEGER();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_INTEGER();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, inta, dot, intb) {
        			return new TokenNode("DECIMAL", inta.text + dot + intb.text, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_INTEGER() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_DIGIT();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_DIGIT();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) {
        			return new TokenNode("INTEGER", digits.join(""), offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WSOPT() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        if (/^[\t ]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t ]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[\t ]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[\\t ]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, whitespace) {
        			return new TokenNode("WS", whitespace.join(""), offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WS() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[\t ]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t ]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[\t ]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[\\t ]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, whitespace) {
        			return new TokenNode("WS", whitespace.join(""), offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ANY_CHAR() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.length > pos.offset) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name) {
        			return new TokenNode("ANY_CHAR", name, offset, line, column);
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      		// Overriding clone for better performance.
      		// TODO, not needed after switch to PEGjs 0.8.0
      		clone = function (pos) {
      			return { 
      				offset: pos.offset, 
      				line: pos.line, 
      				column: pos.column, 
      				seenCR: pos.seenCR 
      			};
      		}
      
      		var connector = arguments[2];
      
      		if (connector.getStateStack().length == 0) {
      		    connector.pushState(State.STATE_PCDATA); // init mode
      		}
      
      		function pushState(newState) {
      		    connector.pushState(newState);
      		}
      
      		function popState(expectedPop) {
      		    connector.popState(expectedPop);
      		}
      
      		function peekState() {
      			return connector.peekState();
      		}
      		
      		function checkState(state) {
      			return connector.checkState(state);
      		}
      
      		function checkSuperState(state) {
      			return connector.checkSuperState(state);
      		}		
      	
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
	return fmlexer;
});